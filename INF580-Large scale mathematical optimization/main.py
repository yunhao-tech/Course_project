import numpy as np
import math
from amplpy import AMPL, DataFrame
import sys
import os
import pandas as pd
import matplotlib.pyplot as plt
import time
from scipy.sparse import random

##################### funtions ######################

def gen_rand_model(n,m,k,den):
	# x in R^n
	np.random.seed(0)
	x = np.random.rand(n)
	c = np.random.rand(n)
	# A in R^m,n, B in R^m, c in R^n
	#A = np.random.rand(m,n)*2-1
	#sparsity
	A = random(m, n, density=den).toarray()
	A = A*2-1
	B = A.dot(x)
	# T \sim N(0,1/k)
	T = np.random.normal(scale=1/k,size=(k,m))
	# write data in "random.dat"
	TA = T.dot(A)
	TB = T.dot(B)
	projdat = 'random.dat'
	if os.path.exists(projdat):
	    os.remove(projdat)
	f = open(projdat, "w")
	print("# random.dat generated by random.py", file=f)
	print("param m := " + str(m) + ";", file=f)
	print("param n := " + str(n) + ";", file=f)
	print("param k := " + str(k) + ";", file=f)
	print("param A :=" , file=f)
	for i in range(m):
	    for j in range(n):
	        print("    "+str(i+1)+" "+str(j+1)+" "+str(A[i,j]), file=f)
	print(";",file=f)
	print("param B :=", file=f)
	for i in range(m):
	    print("    "+str(i+1)+" "+str(B[i]),file=f)
	print(";",file=f)
	print("param c :=", file=f)
	for i in range(n):
	    print("    "+str(i+1)+" "+str(c[i]),file=f)
	print(";",file=f)

	print("param T :=" , file=f)
	for i in range(k):
	    for j in range(m):
	        print("    "+str(i+1)+" "+str(j+1)+" "+str(T[i,j]), file=f)
	print(";",file=f)

	print("param TA :=" , file=f)
	for i in range(k):
	    for j in range(n):
	        print("    "+str(i+1)+" "+str(j+1)+" "+str(TA[i,j]), file=f)
	print(";",file=f)

	print("param TB :=", file=f)
	for i in range(k):
	    print("    "+str(i+1)+" "+str(TB[i]),file=f)
	print(";",file=f)

	f.close()
	return x,A,B,c,T,TA,TB


def td_model(n,m,c,y,A,B):
	# write data in "random.dat"
	projdat = 'TD.dat'
	if os.path.exists(projdat):
	    os.remove(projdat)
	f = open(projdat, "w")
	print("# td.dat generated by random.py", file=f)
	print("param m := " + str(m) + ";", file=f)
	print("param n := " + str(n) + ";", file=f)
	print("param A :=" , file=f)
	for i in range(m):
	    for j in range(n):
	        print("    "+str(i+1)+" "+str(j+1)+" "+str(A[i,j]), file=f)
	print(";",file=f)	
	print("param B :=", file=f)
	for i in range(m):
	    print("    "+str(i+1)+" "+str(B[i]),file=f)
	print(";",file=f)
	print("param c :=", file=f)
	for i in range(n):
	    print("    "+str(i+1)+" "+str(c[i]),file=f)
	print(";",file=f)
	print("param y :=", file=f)
	for i in range(len(y_prime)):
	    print("    "+str(i+1)+" %f"%y_prime[i],file=f)
	print(";",file=f)
	f.close()


def solve(times,i):
	#p
	t0 = time.time()
	amplp = AMPL()
	amplp.read('./P.run')
	times[0,i] = time.time()-t0
	#tp
	t1 = time.time()
	ampltp = AMPL()
	ampltp.read('./TP.run')
	times[1,i] = time.time()-t1
	#td
	t2 = time.time()
	ampltd = AMPL()
	ampltd.read('./TD.run')
	times[2,i] = time.time()-t2

def solve_dual():
	ampld = AMPL()
	ampld.read('./TD1.run')

def read_dual():
	d = pd.read_csv('./SolutionTDd.csv')
	return np.array(d)

def read_data():
	p = pd.read_csv('./SolutionP.csv')
	tp = pd.read_csv('./SolutionTP.csv')
	td = pd.read_csv('./SolutionTD.csv')
	return np.array(p),np.array(tp),np.array(td)

def neg(x):
	sum_neg = np.sum(abs(x[x<0]))
	modx = np.sum(abs(x))
	return sum_neg/modx


def analyse_feas(A,B,TA,TB,c,p,xt,x_prime):
	# calculate teas of p
	feasp = np.sum(np.abs((A.dot(p)).reshape(-1)-B))/np.sum(np.abs(B)) + neg(p)
	# calculate teas of tp
	feastp = np.sum(np.abs((A.dot(xt)).reshape(-1)-B))/np.sum(np.abs(B)) + neg(xt)
	# calculate feas of td
	#feastd = np.sum(np.abs((td.T.dot(TA)).reshape(-1)-c))/np.sum(np.abs(c))
	feastd = np.sum(np.abs((A.dot(x_prime)).reshape(-1)-B))/np.sum(np.abs(B)) + neg(x_prime)
	#print('feas:',feasp,feastp,feastd)
	return feasp,feastp,feastd


def analyse_obj(c,p,xt,x_prime,TB):
	#object p
	objp = c.dot(p)
	#object tp
	#calculate x tiled
	objtp = c.dot(xt)
	#objtd = c.dot(x_prime)
	#print('objs:',objp,objtp,objtd)
	return objp,objtp


##################### main function ##########################

iteration = 46
m = 500
n = 700
k = 50
density = 1

# if len(sys.argv) = 1:
#     interation = sys.argv[1]
# elif len(sys.argv) = 3:
# 	m = sys.argv[1]
# 	n = sys.argv[2]
# 	k = sys.argv[3]
feasps = np.zeros(iteration)
feastps = np.zeros(iteration)
feastds = np.zeros(iteration)
objps = np.zeros(iteration)
objtps = np.zeros(iteration)
objtds = np.zeros(iteration)
_objtps = np.zeros(iteration)
times = np.zeros((3,iteration))
#np.random.seed(0)

for i in range(iteration):
	x,A,B,c,T,TA,TB = gen_rand_model(n,m,k,density)
	solve(times,i)
	p,tp,td = read_data()
	#y = td.dot(T)
	t4 = time.time()
	xt = tp.reshape(-1) + np.linalg.lstsq(A,B-(A.dot(tp)).reshape(-1),rcond=None)[0]
	times[1,i] += time.time()-t4

	t3 = time.time()
	y_prime = T.T.dot(td).reshape(-1)
	ind1 = abs(y_prime)>1e-3
	ind1 = ind1.reshape(-1)
	print(ind1.shape,A.shape)
	A_p = A[ind1]
	B_p = B[ind1]
	ind2 = abs(A.T.dot(y_prime)-c)>1e-3
	A_d = np.eye(n)[ind2]
	A_new = np.concatenate((A_p,A_d))
	B_new = np.concatenate((B_p,np.zeros(sum(ind2))))
	x_prime = np.linalg.lstsq(A_new,B_new)[0]
	objtds[i] = x_prime.dot(c)
	times[2,i] += time.time()-t3

	# y_prime = T.T.dot(td)
	# #write model
	# td_model(n,m,c,y_prime,A,B)
	# solve_dual()
	# x_prime = read_dual()
	# print(x_prime)
	
	#print("x':",x_prime)
	print('\ncurrent setup:',' m:',m,'n:',n,'k:',k)
	feasps[i],feastps[i],feastds[i]= analyse_feas(A,B,TA,TB,c,p,xt,x_prime)
	objps[i],objtps[i]= analyse_obj(c,p,xt,x_prime,TB)
	_objtps[i] = c.dot(tp)
	k += 10


xz = np.arange(50,501,10)
plt.title('objective function value, density=1')
plt.plot(xz,objps,c='r',label='obj-p')
plt.plot(xz,objtps,c='green',label='obj-tp')
plt.plot(xz,objtds,c='b',label='obj-td')
plt.plot(xz,_objtps,c='y',label='obj-c*tp')
plt.ylabel('objective value')
plt.xlabel('k')
plt.legend(loc='best')
plt.show()

plt.title('feasibility error, density=1')
plt.plot(xz,feasps,c='r',label='feas-p')
plt.plot(xz,feastps,c='green',label='feas-tp')
plt.plot(xz,feastds,c='b',label='feas-td')
plt.ylabel('feasibility error')
plt.xlabel('k')
plt.legend(loc='best')
plt.show()

plt.title('computation time, density=1')
plt.plot(xz,times[0,:],c='r',label='cpu time-p')
plt.plot(xz,times[1,:],c='green',label='cpu time-tp')
plt.plot(xz,times[2,:],c='b',label='cpu time-td')
plt.ylabel('cpu time')
plt.xlabel('k')
plt.legend(loc='best')
plt.show()